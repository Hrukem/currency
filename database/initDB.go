package database

import (
	"currency/errorhandler"
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
	"log"
	"os"
)

var db1 *sql.DB = nil

func InitDataBase() error {
	err := initDB()
	if err != nil {
		log.Println(err)
		return err
	}

	s := "host=" + "localhost" +
		" port=" + "5432" +
		" user=" + os.Getenv("DATABASE_USER") +
		" password=" + os.Getenv("DATABASE_PASSWORD") +
		" dbname=" + os.Getenv("DATABASE") +
		" sslmode=disable"

	db, err1 := sql.Open("postgres", s)
	if err1 != nil {
		log.Println(err1)
		return err1
	}

	db1 = db
	fmt.Println("connected database user!")

	return nil
}

func initDB() error {
	ddu := os.Getenv("DATABASE_DEFAULT_USER")
	ddp := os.Getenv("DATABASE_DEFAULT_PASSWORD")
	dbs := os.Getenv("DATABASE")

	s := "host=" + "127.0.0.1" +
		" port=" + "5432" +
		" user=" + ddu +
		" password=" + ddp +
		" dbname=" + dbs +
		" sslmode=disable"

	db, err := sql.Open("postgres", s)
	if err != nil {
		log.Println(err)
		return err
	}

	fmt.Println("connected database default!")

	logTable := "logTable"

	s = "CREATE TABLE " + os.Getenv("TABLE") + " (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, data varchar(100) NOT NULL, dateInsert timestamp(0) without time zone);"
	_, err = db.Exec(s)
	errorhandler.CheckError(err)
	s = "CREATE TABLE " + logTable + " (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, data varchar(300), typeRequest varchar(100), dateInsert timestamp(0) without time zone);"
	_, err = db.Exec(s)
	errorhandler.CheckError(err)
	s = "CREATE USER " + os.Getenv("DATABASE_USER") + " WITH PASSWORD '" + os.Getenv("DATABASE_PASSWORD") + "';"
	_, err = db.Exec(s)
	errorhandler.CheckError(err)
	s = "GRANT ALL PRIVILEGES ON DATABASE " + os.Getenv("DATABASE") + " to " + os.Getenv("DATABASE_USER") + ";"
	_, err = db.Exec(s)
	errorhandler.CheckError(err)
	s = "GRANT All PRIVILEGES ON TABLE " + os.Getenv("TABLE") +", " + logTable + " TO " + os.Getenv("DATABASE_USER") + ";"
	_, err = db.Exec(s)
	errorhandler.CheckError(err)

	fmt.Println("create table and user")
	err = db.Close()
	errorhandler.CheckError(err)
	fmt.Println("base default close")

	return nil
}
